package pentesterland

import (
	"encoding/json"
	"fmt"
	"io"
	"strings"
	"time"

	"github.com/gorilla/feeds"
	"github.com/nbr23/rss-banquet/parser"
)

func (PentesterLand) String() string {
	return "pentesterland"
}

func (PentesterLand) GetOptions() parser.Options {
	return parser.Options{}
}

type pentesterLandItem struct {
	Links []struct {
		Url   string `json:"Link"`
		Title string `json:"Title"`
	} `json:"Links"`
	Authors         []string `json:"Authors"`
	Programs        []string `json:"Programs"`
	Bugs            []string `json:"Bugs"`
	Bounty          string   `json:"Bounty"`
	PublicationDate string   `json:"PublicationDate"`
	AddedDate       string   `json:"AddedDate"`
}

type pentesterLandJson struct {
	Data []pentesterLandItem `json:"data"`
}

type PentesterLand struct{}

func PentesterLandParser() parser.Parser {
	return PentesterLand{}
}

func buildItemContent(item *pentesterLandItem, isHtml bool) string {
	description := ""
	if item.Bounty != "-" {
		description += fmt.Sprintf("Bounty: %s\n", item.Bounty)
	}
	if len(item.Programs) > 0 && item.Programs[0] != "-" {
		description += fmt.Sprintf("Programs: %s\n", strings.Join(item.Programs, ", "))
	}
	if len(item.Bugs) > 0 {
		description += fmt.Sprintf("Bugs: %s\n", strings.Join(item.Bugs, ", "))
	}
	description += fmt.Sprintf("Authors: %s\n", strings.Join(item.Authors, ", "))
	description += fmt.Sprintf("PublicationDate: %s\n", item.PublicationDate)
	description += fmt.Sprintf("AddedDate: %s\n", item.AddedDate)

	if isHtml {
		for _, link := range item.Links {
			description += fmt.Sprintf("<a href=\"%s\">%s</a>\n", link.Url, link.Title)
		}
	}
	return description
}

func feedAdapter(j *pentesterLandJson) (*feeds.Feed, error) {
	feed := feeds.Feed{
		Title:       "PentesterLand",
		Description: "PentesterLand",
		Items:       []*feeds.Item{},
		Author:      &feeds.Author{Name: "PentesterLand"},
		Created:     time.Now(),
		Link:        &feeds.Link{Href: "https://pentester.land/writeups/"},
	}

	for _, d := range j.Data {
		var item feeds.Item
		if len(d.Links) == 0 {
			fmt.Println("skipping item without a link", d)
			continue
		}

		item.Created, _ = time.Parse("2006-01-02", d.AddedDate)
		item.Updated = item.Created
		item.Title = fmt.Sprintf("[%s] %s", d.PublicationDate, d.Links[0].Title)

		item.Link = &feeds.Link{Href: d.Links[0].Url}
		item.Id = fmt.Sprintf("%s%s", item.Created.Format(time.RFC3339), d.Links[0].Url)
		item.Author = &feeds.Author{
			Name: strings.Join(d.Authors, ", "),
		}
		item.Content = buildItemContent(&d, true)
		item.Description = buildItemContent(&d, false)
		feed.Items = append(feed.Items, &item)
	}
	return &feed, nil
}

func (PentesterLand) Parse(options *parser.Options) (*feeds.Feed, error) {
	url := "https://pentester.land/writeups.json"
	resp, err := parser.HttpGet(url)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	data, err := io.ReadAll(resp.Body)

	if err != nil {
		return nil, err
	}

	var feed pentesterLandJson

	if err := json.Unmarshal(data, &feed); err != nil {
		return nil, err
	}

	return feedAdapter(&feed)
}
